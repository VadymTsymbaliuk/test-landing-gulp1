!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";var n=[],i=Object.getPrototypeOf,o=n.slice,r=n.flat?function(t){return n.flat.call(t)}:function(t){return n.concat.apply([],t)},s=n.push,a=n.indexOf,l={},c=l.toString,u=l.hasOwnProperty,h=u.toString,d=h.call(Object),f={},p=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},g=function(t){return null!=t&&t===t.window},m=t.document,v={type:!0,src:!0,nonce:!0,noModule:!0};function y(t,e,n){var i,o,r=(n=n||m).createElement("script");if(r.text=t,e)for(i in v)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?l[c.call(t)]||"object":typeof t}var b=function(t,e){return new b.fn.init(t,e)};function w(t){var e=!!t&&"length"in t&&t.length,n=_(t);return!p(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}b.fn=b.prototype={jquery:"3.6.0",constructor:b,length:0,toArray:function(){return o.call(this)},get:function(t){return null==t?o.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=b.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return b.each(this,t)},map:function(t){return this.pushStack(b.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(b.grep(this,function(t,e){return(e+1)%2}))},odd:function(){return this.pushStack(b.grep(this,function(t,e){return e%2}))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},b.extend=b.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||p(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(c&&i&&(b.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[e],r=o&&!Array.isArray(n)?[]:o||b.isPlainObject(n)?n:{},o=!1,s[e]=b.extend(c,r,i)):void 0!==i&&(s[e]=i));return s},b.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==c.call(t))&&(!(e=i(t))||"function"==typeof(n=u.call(e,"constructor")&&e.constructor)&&h.call(n)===d)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){y(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(w(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(w(Object(t))?b.merge(n,"string"==typeof t?[t]:t):s.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:a.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,s=0,a=[];if(w(t))for(i=t.length;s<i;s++)null!=(o=e(t[s],s,n))&&a.push(o);else for(s in t)null!=(o=e(t[s],s,n))&&a.push(o);return r(a)},guid:1,support:f}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=n[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){l["[object "+e+"]"]=e.toLowerCase()});var x=function(t){var e,n,i,o,r,s,a,l,c,u,h,d,f,p,g,m,v,y,_,b="sizzle"+1*new Date,w=t.document,x=0,E=0,T=lt(),C=lt(),A=lt(),S=lt(),k=function(t,e){return t===e&&(h=!0),0},L={}.hasOwnProperty,N=[],D=N.pop,O=N.push,I=N.push,j=N.slice,P=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+M+"*("+q+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+M+"*\\]",$=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",R=new RegExp(M+"+","g"),W=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),F=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),Y=new RegExp($),X=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ot=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){d()},st=bt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{I.apply(N=j.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(t){I={apply:N.length?function(t,e){O.apply(t,j.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,o){var r,a,c,u,h,p,v,y=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!o&&(d(e),e=e||f,g)){if(11!==w&&(h=Z.exec(t)))if(r=h[1]){if(9===w){if(!(c=e.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(y&&(c=y.getElementById(r))&&_(e,c)&&c.id===r)return i.push(c),i}else{if(h[2])return I.apply(i,e.getElementsByTagName(t)),i;if((r=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return I.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!S[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===w&&(U.test(t)||F.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((u=e.getAttribute("id"))?u=u.replace(it,ot):e.setAttribute("id",u=b)),a=(p=s(t)).length;a--;)p[a]=(u?"#"+u:":scope")+" "+_t(p[a]);v=p.join(",")}try{return I.apply(i,y.querySelectorAll(v)),i}catch(e){S(t,!0)}finally{u===b&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,i,o)}function lt(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function ct(t){return t[b]=!0,t}function ut(t){var e=f.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ht(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function dt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function pt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct(function(e){return e=+e,ct(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},r=at.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!Q.test(e||n&&n.nodeName||"HTML")},d=at.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:w;return s!=f&&9===s.nodeType&&s.documentElement?(p=(f=s).documentElement,g=!r(f),w!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",rt,!1):o.attachEvent&&o.attachEvent("onunload",rt)),n.scope=ut(function(t){return p.appendChild(t).appendChild(f.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length}),n.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=ut(function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=ut(function(t){return p.appendChild(t).id=b,!f.getElementsByName||!f.getElementsByName(b).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(ut(function(t){var e;p.appendChild(t).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),t.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(e=f.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=f.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=J.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ut(function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",$)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(p.compareDocumentPosition),_=e||J.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},k=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t==f||t.ownerDocument==w&&_(w,t)?-1:e==f||e.ownerDocument==w&&_(w,e)?1:u?P(u,t)-P(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t==f?-1:e==f?1:o?-1:r?1:u?P(u,t)-P(u,e):0;if(o===r)return dt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?dt(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},f):f},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(d(t),n.matchesSelector&&g&&!S[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){S(e,!0)}return at(e,f,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=f&&d(t),_(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=f&&d(t);var o=i.attrHandle[e.toLowerCase()],r=o&&L.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},at.escape=function(t){return(t+"").replace(it,ot)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,r=0;if(h=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(k),h){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return u=null,t},o=at.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},(i=at.selectors={cacheLength:50,createPseudo:ct,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&Y.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+M+")"+t+"("+M+"|$)"))&&T(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var o=at.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(R," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,d,f,p,g=r!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(_=(f=(c=(u=(h=(d=m)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===x&&c[1])&&c[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(_=f=0)||p.pop();)if(1===d.nodeType&&++_&&d===e){u[t]=[x,f,_];break}}else if(y&&(_=f=(c=(u=(h=(d=e)[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===x&&c[1]),!1===_)for(;(d=++f&&d&&d[g]||(_=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++_||(y&&((u=(h=d[b]||(d[b]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]=[x,_]),d!==e)););return(_-=o)===i||_%i==0&&_/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return o[b]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,n){for(var i,r=o(t,e),s=r.length;s--;)t[i=P(t,r[s])]=!(n[i]=r[s])}):function(t){return o(t,0,n)}):o}},pseudos:{not:ct(function(t){var e=[],n=[],i=a(t.replace(W,"$1"));return i[b]?ct(function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}}),has:ct(function(t){return function(e){return at(t,e).length>0}}),contains:ct(function(t){return t=t.replace(et,nt),function(e){return(e.textContent||o(e)).indexOf(t)>-1}}),lang:ct(function(t){return X.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return K.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt(function(){return[0]}),last:mt(function(t,e){return[e-1]}),eq:mt(function(t,e,n){return[n<0?n+e:n]}),even:mt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:mt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:mt(function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t}),gt:mt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ft(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=pt(e);function yt(){}function _t(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function bt(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&"parentNode"===r,a=E++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,l){var c,u,h,d=[x,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(u=(h=e[b]||(e[b]={}))[e.uniqueID]||(h[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[r])&&c[0]===x&&c[1]===a)return d[2]=c[2];if(u[r]=d,d[2]=t(e,n,l))return!0}return!1}}function wt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function xt(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function Et(t,e,n,i,o,r){return i&&!i[b]&&(i=Et(i)),o&&!o[b]&&(o=Et(o,r)),ct(function(r,s,a,l){var c,u,h,d=[],f=[],p=s.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!r&&e?g:xt(g,d,t,a,l),v=n?o||(r?t:p||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(c=xt(v,f),i(c,[],a,l),u=c.length;u--;)(h=c[u])&&(v[f[u]]=!(m[f[u]]=h));if(r){if(o||t){if(o){for(c=[],u=v.length;u--;)(h=v[u])&&c.push(m[u]=h);o(null,v=[],c,l)}for(u=v.length;u--;)(h=v[u])&&(c=o?P(r,h):d[u])>-1&&(r[c]=!(s[c]=h))}}else v=xt(v===s?v.splice(p,v.length):v),o?o(null,s,v,l):I.apply(s,v)})}function Tt(t){for(var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,u=bt(function(t){return t===e},a,!0),h=bt(function(t){return P(e,t)>-1},a,!0),d=[function(t,n,i){var o=!s&&(i||n!==c)||((e=n).nodeType?u(t,n,i):h(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])d=[bt(wt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[b]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return Et(l>1&&wt(d),l>1&&_t(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&Tt(t.slice(l,o)),o<r&&Tt(t=t.slice(o)),o<r&&_t(t))}d.push(n)}return wt(d)}return yt.prototype=i.filters=i.pseudos,i.setFilters=new yt,s=at.tokenize=function(t,e){var n,o,r,s,a,l,c,u=C[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=i.preFilter;a;){for(s in n&&!(o=B.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=F.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=V[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):C(t,l).slice(0)},a=at.compile=function(t,e){var n,o=[],r=[],a=A[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Tt(e[n]))[b]?o.push(a):r.push(a);(a=A(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,u){var h,p,m,v=0,y="0",_=r&&[],b=[],w=c,E=r||o&&i.find.TAG("*",u),T=x+=null==w?1:Math.random()||.1,C=E.length;for(u&&(c=s==f||s||u);y!==C&&null!=(h=E[y]);y++){if(o&&h){for(p=0,s||h.ownerDocument==f||(d(h),a=!g);m=t[p++];)if(m(h,s||f,a)){l.push(h);break}u&&(x=T)}n&&((h=!m&&h)&&v--,r&&_.push(h))}if(v+=y,n&&y!==v){for(p=0;m=e[p++];)m(_,b,s,a);if(r){if(v>0)for(;y--;)_[y]||b[y]||(b[y]=D.call(l));b=xt(b)}I.apply(l,b),u&&!r&&b.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(x=T,c=w),_};return n?ct(r):r}(r,o))).selector=t}return a},l=at.select=function(t,e,n,o){var r,l,c,u,h,d="function"==typeof t&&t,f=!o&&s(t=d.selector||t);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=V.needsContext.test(t)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((h=i.find[u])&&(o=h(c.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(r,1),!(t=o.length&&_t(l)))return I.apply(n,o),n;break}}return(d||a(t,f))(o,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=b.split("").sort(k).join("")===b,n.detectDuplicates=!!h,d(),n.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ht("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ht("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||ht(H,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),at}(t);b.find=x,b.expr=x.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=x.uniqueSort,b.text=x.getText,b.isXMLDoc=x.isXML,b.contains=x.contains,b.escapeSelector=x.escape;var E=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&b(t).is(n))break;i.push(t)}return i},T=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},C=b.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var S=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(t,e,n){return p(e)?b.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?b.grep(t,function(t){return t===e!==n}):"string"!=typeof e?b.grep(t,function(t){return a.call(e,t)>-1!==n}):b.filter(e,t,n)}b.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?b.find.matchesSelector(i,t)?[i]:[]:b.find.matches(t,b.grep(e,function(t){return 1===t.nodeType}))},b.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(b(t).filter(function(){for(e=0;e<i;e++)if(b.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)b.find(t,o[e],n);return i>1?b.uniqueSort(n):n},filter:function(t){return this.pushStack(k(this,t||[],!1))},not:function(t){return this.pushStack(k(this,t||[],!0))},is:function(t){return!!k(this,"string"==typeof t&&C.test(t)?b(t):t||[],!1).length}});var L,N=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||L,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:N.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof b?e[0]:e,b.merge(this,b.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:m,!0)),S.test(i[1])&&b.isPlainObject(e))for(i in e)p(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=m.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):p(t)?void 0!==n.ready?n.ready(t):t(b):b.makeArray(t,this)}).prototype=b.fn,L=b(m);var D=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function I(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}b.fn.extend({has:function(t){var e=b(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(b.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&b(t);if(!C.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?b.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?a.call(b(t),this[0]):a.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),b.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return E(t,"parentNode")},parentsUntil:function(t,e,n){return E(t,"parentNode",n)},next:function(t){return I(t,"nextSibling")},prev:function(t){return I(t,"previousSibling")},nextAll:function(t){return E(t,"nextSibling")},prevAll:function(t){return E(t,"previousSibling")},nextUntil:function(t,e,n){return E(t,"nextSibling",n)},prevUntil:function(t,e,n){return E(t,"previousSibling",n)},siblings:function(t){return T((t.parentNode||{}).firstChild,t)},children:function(t){return T(t.firstChild)},contents:function(t){return null!=t.contentDocument&&i(t.contentDocument)?t.contentDocument:(A(t,"template")&&(t=t.content||t),b.merge([],t.childNodes))}},function(t,e){b.fn[t]=function(n,i){var o=b.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=b.filter(i,o)),this.length>1&&(O[t]||b.uniqueSort(o),D.test(t)&&o.reverse()),this.pushStack(o)}});var j=/[^\x20\t\r\n\f]+/g;function P(t){return t}function H(t){throw t}function M(t,e,n,i){var o;try{t&&p(o=t.promise)?o.call(t).done(e).fail(n):t&&p(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}b.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return b.each(t.match(j)||[],function(t,n){e[n]=!0}),e}(t):b.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){b.each(n,function(n,i){p(i)?t.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==_(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return b.each(arguments,function(t,e){for(var n;(n=b.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--}),this},has:function(t){return t?b.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||e||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},b.extend({Deferred:function(e){var n=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return b.Deferred(function(e){b.each(n,function(n,i){var o=p(t[i[4]])&&t[i[4]];r[i[1]](function(){var t=o&&o.apply(this,arguments);t&&p(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(e,i,o){var r=0;function s(e,n,i,o){return function(){var a=this,l=arguments,c=function(){var t,c;if(!(e<r)){if((t=i.apply(a,l))===n.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,p(c)?o?c.call(t,s(r,n,P,o),s(r,n,H,o)):(r++,c.call(t,s(r,n,P,o),s(r,n,H,o),s(r,n,P,n.notifyWith))):(i!==P&&(a=void 0,l=[t]),(o||n.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(t){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(t,u.stackTrace),e+1>=r&&(i!==H&&(a=void 0,l=[t]),n.rejectWith(a,l))}};e?u():(b.Deferred.getStackHook&&(u.stackTrace=b.Deferred.getStackHook()),t.setTimeout(u))}}return b.Deferred(function(t){n[0][3].add(s(0,t,p(o)?o:P,t.notifyWith)),n[1][3].add(s(0,t,p(e)?e:P)),n[2][3].add(s(0,t,p(i)?i:H))}).promise()},promise:function(t){return null!=t?b.extend(t,o):o}},r={};return b.each(n,function(t,e){var s=e[2],a=e[5];o[e[1]]=s.add,a&&s.add(function(){i=a},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),s.add(e[3].fire),r[e[0]]=function(){return r[e[0]+"With"](this===r?void 0:this,arguments),this},r[e[0]+"With"]=s.fireWith}),o.promise(r),e&&e.call(r,r),r},when:function(t){var e=arguments.length,n=e,i=Array(n),r=o.call(arguments),s=b.Deferred(),a=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?o.call(arguments):n,--e||s.resolveWith(i,r)}};if(e<=1&&(M(t,s.done(a(n)).resolve,s.reject,!e),"pending"===s.state()||p(r[n]&&r[n].then)))return s.then();for(;n--;)M(r[n],a(n),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&q.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},b.readyException=function(e){t.setTimeout(function(){throw e})};var z=b.Deferred();function $(){m.removeEventListener("DOMContentLoaded",$),t.removeEventListener("load",$),b.ready()}b.fn.ready=function(t){return z.then(t).catch(function(t){b.readyException(t)}),this},b.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==t&&--b.readyWait>0||z.resolveWith(m,[b]))}}),b.ready.then=z.then,"complete"===m.readyState||"loading"!==m.readyState&&!m.documentElement.doScroll?t.setTimeout(b.ready):(m.addEventListener("DOMContentLoaded",$),t.addEventListener("load",$));var R=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===_(n))for(a in o=!0,n)R(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,p(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(b(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},W=/^-ms-/,B=/-([a-z])/g;function F(t,e){return e.toUpperCase()}function U(t){return t.replace(W,"ms-").replace(B,F)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function X(){this.expando=b.expando+X.uid++}X.uid=1,X.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[U(e)]=n;else for(i in e)o[U(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][U(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(U):(e=U(e))in i?[e]:e.match(j)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||b.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!b.isEmptyObject(e)}};var V=new X,Q=new X,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,G=/[A-Z]/g;function J(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(G,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:K.test(t)?JSON.parse(t):t)}(n)}catch(t){}Q.set(t,e,n)}else n=void 0;return n}b.extend({hasData:function(t){return Q.hasData(t)||V.hasData(t)},data:function(t,e,n){return Q.access(t,e,n)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,n){return V.access(t,e,n)},_removeData:function(t,e){V.remove(t,e)}}),b.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=Q.get(r),1===r.nodeType&&!V.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=U(i.slice(5)),J(r,i,o[i]));V.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){Q.set(this,t)}):R(this,function(e){var n;if(r&&void 0===e)return void 0!==(n=Q.get(r,t))?n:void 0!==(n=J(r,t))?n:void 0;this.each(function(){Q.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Q.remove(this,t)})}}),b.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=V.get(t,e),n&&(!i||Array.isArray(n)?i=V.access(t,e,b.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=b.queue(t,e),i=n.length,o=n.shift(),r=b._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){b.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return V.get(t,n)||V.access(t,n,{empty:b.Callbacks("once memory").add(function(){V.remove(t,[e+"queue",n])})})}}),b.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?b.queue(this[0],t):void 0===e?this:this.each(function(){var n=b.queue(this,t,e);b._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&b.dequeue(this,t)})},dequeue:function(t){return this.each(function(){b.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=b.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=V.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,tt=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),et=["Top","Right","Bottom","Left"],nt=m.documentElement,it=function(t){return b.contains(t.ownerDocument,t)},ot={composed:!0};nt.getRootNode&&(it=function(t){return b.contains(t.ownerDocument,t)||t.getRootNode(ot)===t.ownerDocument});var rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&it(t)&&"none"===b.css(t,"display")};function st(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return b.css(t,e,"")},l=a(),c=n&&n[3]||(b.cssNumber[e]?"":"px"),u=t.nodeType&&(b.cssNumber[e]||"px"!==c&&+l)&&tt.exec(b.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)b.style(t,e,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,b.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var at={};function lt(t){var e,n=t.ownerDocument,i=t.nodeName,o=at[i];return o||(e=n.body.appendChild(n.createElement(i)),o=b.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),at[i]=o,o)}function ct(t,e){for(var n,i,o=[],r=0,s=t.length;r<s;r++)(i=t[r]).style&&(n=i.style.display,e?("none"===n&&(o[r]=V.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&rt(i)&&(o[r]=lt(i))):"none"!==n&&(o[r]="none",V.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(t[r].style.display=o[r]);return t}b.fn.extend({show:function(){return ct(this,!0)},hide:function(){return ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?b(this).show():b(this).hide()})}});var ut,ht,dt=/^(?:checkbox|radio)$/i,ft=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pt=/^$|^module$|\/(?:java|ecma)script/i;ut=m.createDocumentFragment().appendChild(m.createElement("div")),(ht=m.createElement("input")).setAttribute("type","radio"),ht.setAttribute("checked","checked"),ht.setAttribute("name","t"),ut.appendChild(ht),f.checkClone=ut.cloneNode(!0).cloneNode(!0).lastChild.checked,ut.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!ut.cloneNode(!0).lastChild.defaultValue,ut.innerHTML="<option></option>",f.option=!!ut.lastChild;var gt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?b.merge([t],n):n}function vt(t,e){for(var n=0,i=t.length;n<i;n++)V.set(t[n],"globalEval",!e||V.get(e[n],"globalEval"))}gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td,f.option||(gt.optgroup=gt.option=[1,"<select multiple='multiple'>","</select>"]);var yt=/<|&#?\w+;/;function _t(t,e,n,i,o){for(var r,s,a,l,c,u,h=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((r=t[f])||0===r)if("object"===_(r))b.merge(d,r.nodeType?[r]:r);else if(yt.test(r)){for(s=s||h.appendChild(e.createElement("div")),a=(ft.exec(r)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,s.innerHTML=l[1]+b.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;b.merge(d,s.childNodes),(s=h.firstChild).textContent=""}else d.push(e.createTextNode(r));for(h.textContent="",f=0;r=d[f++];)if(i&&b.inArray(r,i)>-1)o&&o.push(r);else if(c=it(r),s=mt(h.appendChild(r),"script"),c&&vt(s),n)for(u=0;r=s[u++];)pt.test(r.type||"")&&n.push(r);return h}var bt=/^([^.]*)(?:\.(.+)|)/;function wt(){return!0}function xt(){return!1}function Et(t,e){return t===function(){try{return m.activeElement}catch(t){}}()==("focus"===e)}function Tt(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Tt(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=xt;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return b().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=b.guid++)),t.each(function(){b.event.add(this,e,o,i,n)})}function Ct(t,e,n){n?(V.set(t,e,!1),b.event.add(t,e,{namespace:!1,handler:function(t){var i,r,s=V.get(this,e);if(1&t.isTrigger&&this[e]){if(s.length)(b.event.special[e]||{}).delegateType&&t.stopPropagation();else if(s=o.call(arguments),V.set(this,e,s),i=n(this,e),this[e](),s!==(r=V.get(this,e))||i?V.set(this,e,!1):r={},s!==r)return t.stopImmediatePropagation(),t.preventDefault(),r&&r.value}else s.length&&(V.set(this,e,{value:b.event.trigger(b.extend(s[0],b.Event.prototype),s.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===V.get(t,e)&&b.event.add(t,e,wt)}b.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,h,d,f,p,g,m=V.get(t);if(Y(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&b.find.matchesSelector(nt,o),n.guid||(n.guid=b.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(e){return void 0!==b&&b.event.triggered!==e.type?b.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(j)||[""]).length;c--;)f=g=(a=bt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=b.event.special[f]||{},f=(o?h.delegateType:h.bindType)||f,h=b.event.special[f]||{},u=b.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&b.expr.match.needsContext.test(o),namespace:p.join(".")},r),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),b.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,h,d,f,p,g,m=V.hasData(t)&&V.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(j)||[""]).length;c--;)if(f=g=(a=bt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=b.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)u=d[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));s&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,p,m.handle)||b.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)b.event.remove(t,f+e[c],n,i,!0);b.isEmptyObject(l)&&V.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=new Array(arguments.length),l=b.event.fix(t),c=(V.get(this,"events")||Object.create(null))[l.type]||[],u=b.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=b.event.handlers.call(this,l,c),e=0;(o=s[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((b.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?b(o,this).index(c)>-1:b.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(b.Event.prototype,t,{enumerable:!0,configurable:!0,get:p(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[b.expando]?t:new b.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return dt.test(e.type)&&e.click&&A(e,"input")&&Ct(e,"click",wt),!1},trigger:function(t){var e=this||t;return dt.test(e.type)&&e.click&&A(e,"input")&&Ct(e,"click"),!0},_default:function(t){var e=t.target;return dt.test(e.type)&&e.click&&A(e,"input")&&V.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},b.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},b.Event=function(t,e){if(!(this instanceof b.Event))return new b.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?wt:xt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&b.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:xt,isPropagationStopped:xt,isImmediatePropagationStopped:xt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=wt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=wt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=wt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},function(t,e){b.event.special[t]={setup:function(){return Ct(this,t,Et),!1},trigger:function(){return Ct(this,t),!0},_default:function(){return!0},delegateType:e}}),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){b.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||b.contains(this,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),b.fn.extend({on:function(t,e,n,i){return Tt(this,t,e,n,i)},one:function(t,e,n,i){return Tt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,b(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=xt),this.each(function(){b.event.remove(this,t,n,e)})}});var At=/<script|<style|<link/i,St=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Lt(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&b(t).children("tbody")[0]||t}function Nt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Dt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ot(t,e){var n,i,o,r,s,a;if(1===e.nodeType){if(V.hasData(t)&&(a=V.get(t).events))for(o in V.remove(e,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)b.event.add(e,o,a[o][n]);Q.hasData(t)&&(r=Q.access(t),s=b.extend({},r),Q.set(e,s))}}function It(t,e,n,i){e=r(e);var o,s,a,l,c,u,h=0,d=t.length,g=d-1,m=e[0],v=p(m);if(v||d>1&&"string"==typeof m&&!f.checkClone&&St.test(m))return t.each(function(o){var r=t.eq(o);v&&(e[0]=m.call(this,o,r.html())),It(r,e,n,i)});if(d&&(s=(o=_t(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=s),s||i)){for(l=(a=b.map(mt(o,"script"),Nt)).length;h<d;h++)c=o,h!==g&&(c=b.clone(c,!0,!0),l&&b.merge(a,mt(c,"script"))),n.call(t[h],c,h);if(l)for(u=a[a.length-1].ownerDocument,b.map(a,Dt),h=0;h<l;h++)c=a[h],pt.test(c.type||"")&&!V.access(c,"globalEval")&&b.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?b._evalUrl&&!c.noModule&&b._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):y(c.textContent.replace(kt,""),c,u))}return t}function jt(t,e,n){for(var i,o=e?b.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||b.cleanData(mt(i)),i.parentNode&&(n&&it(i)&&vt(mt(i,"script")),i.parentNode.removeChild(i));return t}b.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,r,s,a,l,c,u=t.cloneNode(!0),h=it(t);if(!(f.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||b.isXMLDoc(t)))for(s=mt(u),i=0,o=(r=mt(t)).length;i<o;i++)a=r[i],l=s[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&dt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(r=r||mt(t),s=s||mt(u),i=0,o=r.length;i<o;i++)Ot(r[i],s[i]);else Ot(t,u);return(s=mt(u,"script")).length>0&&vt(s,!h&&mt(t,"script")),u},cleanData:function(t){for(var e,n,i,o=b.event.special,r=0;void 0!==(n=t[r]);r++)if(Y(n)){if(e=n[V.expando]){if(e.events)for(i in e.events)o[i]?b.event.remove(n,i):b.removeEvent(n,i,e.handle);n[V.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),b.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return R(this,function(t){return void 0===t?b.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return It(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Lt(this,t).appendChild(t)})},prepend:function(){return It(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Lt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return It(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return It(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(b.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return b.clone(this,t,e)})},html:function(t){return R(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!gt[(ft.exec(t)||["",""])[1].toLowerCase()]){t=b.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(b.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return It(this,arguments,function(e){var n=this.parentNode;b.inArray(this,t)<0&&(b.cleanData(mt(this)),n&&n.replaceChild(e,this))},t)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){b.fn[t]=function(t){for(var n,i=[],o=b(t),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),b(o[a])[e](n),s.apply(i,n.get());return this.pushStack(i)}});var Pt=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),Ht=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Mt=function(t,e,n){var i,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];for(o in i=n.call(t),e)t.style[o]=r[o];return i},qt=new RegExp(et.join("|"),"i");function zt(t,e,n){var i,o,r,s,a=t.style;return(n=n||Ht(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||it(t)||(s=b.style(t,e)),!f.pixelBoxStyles()&&Pt.test(s)&&qt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function $t(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",nt.appendChild(c).appendChild(u);var e=t.getComputedStyle(u);i="1%"!==e.top,l=12===n(e.marginLeft),u.style.right="60%",s=36===n(e.right),o=36===n(e.width),u.style.position="absolute",r=12===n(u.offsetWidth/3),nt.removeChild(c),u=null}}function n(t){return Math.round(parseFloat(t))}var i,o,r,s,a,l,c=m.createElement("div"),u=m.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===u.style.backgroundClip,b.extend(f,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,n,i,o;return null==a&&(e=m.createElement("table"),n=m.createElement("tr"),i=m.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",n.style.cssText="border:1px solid",n.style.height="1px",i.style.height="9px",i.style.display="block",nt.appendChild(e).appendChild(n).appendChild(i),o=t.getComputedStyle(n),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===n.offsetHeight,nt.removeChild(e)),a}}))}();var Rt=["Webkit","Moz","ms"],Wt=m.createElement("div").style,Bt={};function Ft(t){var e=b.cssProps[t]||Bt[t];return e||(t in Wt?t:Bt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Rt.length;n--;)if((t=Rt[n]+e)in Wt)return t}(t)||t)}var Ut=/^(none|table(?!-c[ea]).+)/,Yt=/^--/,Xt={position:"absolute",visibility:"hidden",display:"block"},Vt={letterSpacing:"0",fontWeight:"400"};function Qt(t,e,n){var i=tt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Kt(t,e,n,i,o,r){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=b.css(t,n+et[s],!0,o)),i?("content"===n&&(l-=b.css(t,"padding"+et[s],!0,o)),"margin"!==n&&(l-=b.css(t,"border"+et[s]+"Width",!0,o))):(l+=b.css(t,"padding"+et[s],!0,o),"padding"!==n?l+=b.css(t,"border"+et[s]+"Width",!0,o):a+=b.css(t,"border"+et[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function Gt(t,e,n){var i=Ht(t),o=(!f.boxSizingReliable()||n)&&"border-box"===b.css(t,"boxSizing",!1,i),r=o,s=zt(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Pt.test(s)){if(!n)return s;s="auto"}return(!f.boxSizingReliable()&&o||!f.reliableTrDimensions()&&A(t,"tr")||"auto"===s||!parseFloat(s)&&"inline"===b.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===b.css(t,"boxSizing",!1,i),(r=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+Kt(t,e,n||(o?"border":"content"),r,i,s)+"px"}function Jt(t,e,n,i,o){return new Jt.prototype.init(t,e,n,i,o)}b.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=zt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=U(e),l=Yt.test(e),c=t.style;if(l||(e=Ft(a)),s=b.cssHooks[e]||b.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"===(r=typeof n)&&(o=tt.exec(n))&&o[1]&&(n=st(t,e,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(b.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,r,s,a=U(e);return Yt.test(e)||(e=Ft(a)),(s=b.cssHooks[e]||b.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=zt(t,e,i)),"normal"===o&&e in Vt&&(o=Vt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),b.each(["height","width"],function(t,e){b.cssHooks[e]={get:function(t,n,i){if(n)return!Ut.test(b.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Gt(t,e,i):Mt(t,Xt,function(){return Gt(t,e,i)})},set:function(t,n,i){var o,r=Ht(t),s=!f.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===b.css(t,"boxSizing",!1,r),l=i?Kt(t,e,i,a,r):0;return a&&s&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-Kt(t,e,"border",!1,r)-.5)),l&&(o=tt.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=b.css(t,e)),Qt(0,n,l)}}}),b.cssHooks.marginLeft=$t(f.reliableMarginLeft,function(t,e){if(e)return(parseFloat(zt(t,"marginLeft"))||t.getBoundingClientRect().left-Mt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),b.each({margin:"",padding:"",border:"Width"},function(t,e){b.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+et[i]+e]=r[i]||r[i-2]||r[0];return o}},"margin"!==t&&(b.cssHooks[t+e].set=Qt)}),b.fn.extend({css:function(t,e){return R(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Ht(t),o=e.length;s<o;s++)r[e[s]]=b.css(t,e[s],!1,i);return r}return void 0!==n?b.style(t,e,n):b.css(t,e)},t,e,arguments.length>1)}}),b.Tween=Jt,Jt.prototype={constructor:Jt,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||b.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(b.cssNumber[n]?"":"px")},cur:function(){var t=Jt.propHooks[this.prop];return t&&t.get?t.get(this):Jt.propHooks._default.get(this)},run:function(t){var e,n=Jt.propHooks[this.prop];return this.options.duration?this.pos=e=b.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Jt.propHooks._default.set(this),this}},Jt.prototype.init.prototype=Jt.prototype,Jt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=b.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){b.fx.step[t.prop]?b.fx.step[t.prop](t):1!==t.elem.nodeType||!b.cssHooks[t.prop]&&null==t.elem.style[Ft(t.prop)]?t.elem[t.prop]=t.now:b.style(t.elem,t.prop,t.now+t.unit)}}},Jt.propHooks.scrollTop=Jt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},b.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},b.fx=Jt.prototype.init,b.fx.step={};var Zt,te,ee=/^(?:toggle|show|hide)$/,ne=/queueHooks$/;function ie(){te&&(!1===m.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(ie):t.setTimeout(ie,b.fx.interval),b.fx.tick())}function oe(){return t.setTimeout(function(){Zt=void 0}),Zt=Date.now()}function re(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=et[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function se(t,e,n){for(var i,o=(ae.tweeners[e]||[]).concat(ae.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function ae(t,e,n){var i,o,r=0,s=ae.prefilters.length,a=b.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Zt||oe(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:b.extend({},e),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:e,originalOptions:n,startTime:Zt||oe(),duration:n.duration,tweens:[],createTween:function(e,n){var i=b.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=U(n)],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=b.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=ae.prefilters[r].call(c,t,u,c.opts))return p(i.stop)&&(b._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return b.map(u,se,c),p(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),b.fx.timer(b.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}b.Animation=b.extend(ae,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return st(n.elem,t,tt.exec(e),n),n}]},tweener:function(t,e){p(t)?(e=t,t=["*"]):t=t.match(j);for(var n,i=0,o=t.length;i<o;i++)n=t[i],ae.tweeners[n]=ae.tweeners[n]||[],ae.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u,h="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&rt(t),m=V.get(t,"fxshow");for(i in n.queue||(null==(s=b._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,b.queue(t,"fx").length||s.empty.fire()})})),e)if(o=e[i],ee.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||b.style(t,i)}if((l=!b.isEmptyObject(e))||!b.isEmptyObject(f))for(i in h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=V.get(t,"display")),"none"===(u=b.css(t,"display"))&&(c?u=c:(ct([t],!0),c=t.style.display||c,u=b.css(t,"display"),ct([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===b.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=V.access(t,"fxshow",{display:c}),r&&(m.hidden=!g),g&&ct([t],!0),d.done(function(){for(i in g||ct([t]),V.remove(t,"fxshow"),f)b.style(t,i,f[i])})),l=se(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ae.prefilters.unshift(t):ae.prefilters.push(t)}}),b.speed=function(t,e,n){var i=t&&"object"==typeof t?b.extend({},t):{complete:n||!n&&e||p(t)&&t,duration:t,easing:n&&e||e&&!p(e)&&e};return b.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in b.fx.speeds?i.duration=b.fx.speeds[i.duration]:i.duration=b.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){p(i.old)&&i.old.call(this),i.queue&&b.dequeue(this,i.queue)},i},b.fn.extend({fadeTo:function(t,e,n,i){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=b.isEmptyObject(t),r=b.speed(e,n,i),s=function(){var e=ae(this,b.extend({},t),r);(o||V.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=b.timers,s=V.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&ne.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||b.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=V.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=b.timers,s=i?i.length:0;for(n.finish=!0,b.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),b.each(["toggle","show","hide"],function(t,e){var n=b.fn[e];b.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(re(e,!0),t,i,o)}}),b.each({slideDown:re("show"),slideUp:re("hide"),slideToggle:re("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){b.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),b.timers=[],b.fx.tick=function(){var t,e=0,n=b.timers;for(Zt=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||b.fx.stop(),Zt=void 0},b.fx.timer=function(t){b.timers.push(t),b.fx.start()},b.fx.interval=13,b.fx.start=function(){te||(te=!0,ie())},b.fx.stop=function(){te=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,n){return e=b.fx&&b.fx.speeds[e]||e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=m.createElement("input"),e=m.createElement("select").appendChild(m.createElement("option"));t.type="checkbox",f.checkOn=""!==t.value,f.optSelected=e.selected,(t=m.createElement("input")).value="t",t.type="radio",f.radioValue="t"===t.value}();var le,ce=b.expr.attrHandle;b.fn.extend({attr:function(t,e){return R(this,b.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){b.removeAttr(this,t)})}}),b.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?b.prop(t,e,n):(1===r&&b.isXMLDoc(t)||(o=b.attrHooks[e.toLowerCase()]||(b.expr.match.bool.test(e)?le:void 0)),void 0!==n?null===n?void b.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=b.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!f.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(j);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),le={set:function(t,e,n){return!1===e?b.removeAttr(t,n):t.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ce[e]||b.find.attr;ce[e]=function(t,e,i){var o,r,s=e.toLowerCase();return i||(r=ce[s],ce[s]=o,o=null!=n(t,e,i)?s:null,ce[s]=r),o}});var ue=/^(?:input|select|textarea|button)$/i,he=/^(?:a|area)$/i;function de(t){return(t.match(j)||[]).join(" ")}function fe(t){return t.getAttribute&&t.getAttribute("class")||""}function pe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(j)||[]}b.fn.extend({prop:function(t,e){return R(this,b.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[b.propFix[t]||t]})}}),b.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&b.isXMLDoc(t)||(e=b.propFix[e]||e,o=b.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=b.find.attr(t,"tabindex");return e?parseInt(e,10):ue.test(t.nodeName)||he.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(b.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){b.propFix[this.toLowerCase()]=this}),b.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(p(t))return this.each(function(e){b(this).addClass(t.call(this,e,fe(this)))});if((e=pe(t)).length)for(;n=this[l++];)if(o=fe(n),i=1===n.nodeType&&" "+de(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=de(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(p(t))return this.each(function(e){b(this).removeClass(t.call(this,e,fe(this)))});if(!arguments.length)return this.attr("class","");if((e=pe(t)).length)for(;n=this[l++];)if(o=fe(n),i=1===n.nodeType&&" "+de(o)+" "){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=de(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):p(t)?this.each(function(n){b(this).toggleClass(t.call(this,n,fe(this),e),e)}):this.each(function(){var e,o,r,s;if(i)for(o=0,r=b(this),s=pe(t);e=s[o++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=fe(this))&&V.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":V.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+de(fe(n))+" ").indexOf(e)>-1)return!0;return!1}});var ge=/\r/g;b.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=p(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,b(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=b.map(o,function(t){return null==t?"":t+""})),(e=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))})):o?(e=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(ge,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(t){var e=b.find.attr(t,"value");return null!=e?e:de(b.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=b(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=b.makeArray(e),s=o.length;s--;)((i=o[s]).selected=b.inArray(b.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=b.inArray(b(t).val(),e)>-1}},f.checkOn||(b.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),f.focusin="onfocusin"in t;var me=/^(?:focusinfocus|focusoutblur)$/,ve=function(t){t.stopPropagation()};b.extend(b.event,{trigger:function(e,n,i,o){var r,s,a,l,c,h,d,f,v=[i||m],y=u.call(e,"type")?e.type:e,_=u.call(e,"namespace")?e.namespace.split("."):[];if(s=f=a=i=i||m,3!==i.nodeType&&8!==i.nodeType&&!me.test(y+b.event.triggered)&&(y.indexOf(".")>-1&&(_=y.split("."),y=_.shift(),_.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[b.expando]?e:new b.Event(y,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=_.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+_.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:b.makeArray(n,[e]),d=b.event.special[y]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!g(i)){for(l=d.delegateType||y,me.test(l+y)||(s=s.parentNode);s;s=s.parentNode)v.push(s),a=s;a===(i.ownerDocument||m)&&v.push(a.defaultView||a.parentWindow||t)}for(r=0;(s=v[r++])&&!e.isPropagationStopped();)f=s,e.type=r>1?l:d.bindType||y,(h=(V.get(s,"events")||Object.create(null))[e.type]&&V.get(s,"handle"))&&h.apply(s,n),(h=c&&s[c])&&h.apply&&Y(s)&&(e.result=h.apply(s,n),!1===e.result&&e.preventDefault());return e.type=y,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&p(i[y])&&!g(i)&&((a=i[c])&&(i[c]=null),b.event.triggered=y,e.isPropagationStopped()&&f.addEventListener(y,ve),i[y](),e.isPropagationStopped()&&f.removeEventListener(y,ve),b.event.triggered=void 0,a&&(i[c]=a)),e.result}},simulate:function(t,e,n){var i=b.extend(new b.Event,n,{type:t,isSimulated:!0});b.event.trigger(i,null,e)}}),b.fn.extend({trigger:function(t,e){return this.each(function(){b.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return b.event.trigger(t,e,n,!0)}}),f.focusin||b.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){b.event.simulate(e,t.target,b.event.fix(t))};b.event.special[e]={setup:function(){var i=this.ownerDocument||this.document||this,o=V.access(i,e);o||i.addEventListener(t,n,!0),V.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=V.access(i,e)-1;o?V.access(i,e,o):(i.removeEventListener(t,n,!0),V.remove(i,e))}}});var ye=t.location,_e={guid:Date.now()},be=/\?/;b.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){}return i=n&&n.getElementsByTagName("parsererror")[0],n&&!i||b.error("Invalid XML: "+(i?b.map(i.childNodes,function(t){return t.textContent}).join("\n"):e)),n};var we=/\[\]$/,xe=/\r?\n/g,Ee=/^(?:submit|button|image|reset|file)$/i,Te=/^(?:input|select|textarea|keygen)/i;function Ce(t,e,n,i){var o;if(Array.isArray(e))b.each(e,function(e,o){n||we.test(t)?i(t,o):Ce(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==_(e))i(t,e);else for(o in e)Ce(t+"["+o+"]",e[o],n,i)}b.param=function(t,e){var n,i=[],o=function(t,e){var n=p(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!b.isPlainObject(t))b.each(t,function(){o(this.name,this.value)});else for(n in t)Ce(n,t[n],e,o);return i.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=b.prop(this,"elements");return t?b.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!b(this).is(":disabled")&&Te.test(this.nodeName)&&!Ee.test(t)&&(this.checked||!dt.test(t))}).map(function(t,e){var n=b(this).val();return null==n?null:Array.isArray(n)?b.map(n,function(t){return{name:e.name,value:t.replace(xe,"\r\n")}}):{name:e.name,value:n.replace(xe,"\r\n")}}).get()}});var Ae=/%20/g,Se=/#.*$/,ke=/([?&])_=[^&]*/,Le=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ne=/^(?:GET|HEAD)$/,De=/^\/\//,Oe={},Ie={},je="*/".concat("*"),Pe=m.createElement("a");function He(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(j)||[];if(p(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Me(t,e,n,i){var o={},r=t===Ie;function s(a){var l;return o[a]=!0,b.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function qe(t,e){var n,i,o=b.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&b.extend(!0,t,i),t}Pe.href=ye.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ye.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ye.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":je,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?qe(qe(t,b.ajaxSettings),e):qe(b.ajaxSettings,t)},ajaxPrefilter:He(Oe),ajaxTransport:He(Ie),ajax:function(e,n){"object"==typeof e&&(n=e,e=void 0),n=n||{};var i,o,r,s,a,l,c,u,h,d,f=b.ajaxSetup({},n),p=f.context||f,g=f.context&&(p.nodeType||p.jquery)?b(p):b.event,v=b.Deferred(),y=b.Callbacks("once memory"),_=f.statusCode||{},w={},x={},E="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=Le.exec(r);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(t,e){return null==c&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)T.always(t[T.status]);else for(e in t)_[e]=[_[e],t[e]];return this},abort:function(t){var e=t||E;return i&&i.abort(e),C(0,e),this}};if(v.promise(T),f.url=((e||f.url||ye.href)+"").replace(De,ye.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(j)||[""],null==f.crossDomain){l=m.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Pe.protocol+"//"+Pe.host!=l.protocol+"//"+l.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=b.param(f.data,f.traditional)),Me(Oe,f,n,T),c)return T;for(h in(u=b.event&&f.global)&&0==b.active++&&b.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ne.test(f.type),o=f.url.replace(Se,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ae,"+")):(d=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(be.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(ke,"$1"),d=(be.test(o)?"&":"?")+"_="+_e.guid+++d),f.url=o+d),f.ifModified&&(b.lastModified[o]&&T.setRequestHeader("If-Modified-Since",b.lastModified[o]),b.etag[o]&&T.setRequestHeader("If-None-Match",b.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+je+"; q=0.01":""):f.accepts["*"]),f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,T,f)||c))return T.abort();if(E="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),i=Me(Ie,f,n,T)){if(T.readyState=1,u&&g.trigger("ajaxSend",[T,f]),c)return T;f.async&&f.timeout>0&&(a=t.setTimeout(function(){T.abort("timeout")},f.timeout));try{c=!1,i.send(w,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(e,n,s,l){var h,d,m,w,x,E=n;c||(c=!0,a&&t.clearTimeout(a),i=void 0,r=l||"",T.readyState=e>0?4:0,h=e>=200&&e<300||304===e,s&&(w=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,T,s)),!h&&b.inArray("script",f.dataTypes)>-1&&b.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),w=function(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(f,w,T,h),h?(f.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(b.lastModified[o]=x),(x=T.getResponseHeader("etag"))&&(b.etag[o]=x)),204===e||"HEAD"===f.type?E="nocontent":304===e?E="notmodified":(E=w.state,d=w.data,h=!(m=w.error))):(m=E,!e&&E||(E="error",e<0&&(e=0))),T.status=e,T.statusText=(n||E)+"",h?v.resolveWith(p,[d,E,T]):v.rejectWith(p,[T,E,m]),T.statusCode(_),_=void 0,u&&g.trigger(h?"ajaxSuccess":"ajaxError",[T,f,h?d:m]),y.fireWith(p,[T,E]),u&&(g.trigger("ajaxComplete",[T,f]),--b.active||b.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return b.get(t,e,n,"json")},getScript:function(t,e){return b.get(t,void 0,e,"script")}}),b.each(["get","post"],function(t,e){b[e]=function(t,n,i,o){return p(n)&&(o=o||i,i=n,n=void 0),b.ajax(b.extend({url:t,type:e,dataType:o,data:n,success:i},b.isPlainObject(t)&&t))}}),b.ajaxPrefilter(function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")}),b._evalUrl=function(t,e,n){return b.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){b.globalEval(t,e,n)}})},b.fn.extend({wrapAll:function(t){var e;return this[0]&&(p(t)&&(t=t.call(this[0])),e=b(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return p(t)?this.each(function(e){b(this).wrapInner(t.call(this,e))}):this.each(function(){var e=b(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=p(t);return this.each(function(n){b(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){b(this).replaceWith(this.childNodes)}),this}}),b.expr.pseudos.hidden=function(t){return!b.expr.pseudos.visible(t)},b.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var ze={0:200,1223:204},$e=b.ajaxSettings.xhr();f.cors=!!$e&&"withCredentials"in $e,f.ajax=$e=!!$e,b.ajaxTransport(function(e){var n,i;if(f.cors||$e&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(ze[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=a.ontimeout=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),b.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return b.globalEval(t),t}}}),b.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),b.ajaxTransport("script",function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,o){e=b("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),m.head.appendChild(e[0])},abort:function(){n&&n()}}});var Re,We=[],Be=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=We.pop()||b.expando+"_"+_e.guid++;return this[t]=!0,t}}),b.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=!1!==e.jsonp&&(Be.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Be.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=p(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Be,"$1"+o):!1!==e.jsonp&&(e.url+=(be.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||b.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){void 0===r?b(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,We.push(o)),s&&p(r)&&r(s[0]),s=r=void 0}),"script"}),f.createHTMLDocument=((Re=m.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Re.childNodes.length),b.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(f.createHTMLDocument?((i=(e=m.implementation.createHTMLDocument("")).createElement("base")).href=m.location.href,e.head.appendChild(i)):e=m),r=!n&&[],(o=S.exec(t))?[e.createElement(o[1])]:(o=_t([t],e,r),r&&r.length&&b(r).remove(),b.merge([],o.childNodes)));var i,o,r},b.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=de(t.slice(a)),t=t.slice(0,a)),p(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&b.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?b("<div>").append(b.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},b.expr.pseudos.animated=function(t){return b.grep(b.timers,function(e){return t===e.elem}).length},b.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c=b.css(t,"position"),u=b(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),r=b.css(t,"top"),l=b.css(t,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),p(e)&&(e=e.call(t,n,b.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+o),"using"in e?e.using.call(t,h):u.css(h)}},b.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){b.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===b.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===b.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=b(t).offset()).top+=b.css(t,"borderTopWidth",!0),o.left+=b.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-b.css(i,"marginTop",!0),left:e.left-o.left-b.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===b.css(t,"position");)t=t.offsetParent;return t||nt})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;b.fn[t]=function(i){return R(this,function(t,i,o){var r;if(g(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o},t,i,arguments.length)}}),b.each(["top","left"],function(t,e){b.cssHooks[e]=$t(f.pixelPosition,function(t,n){if(n)return n=zt(t,e),Pt.test(n)?b(t).position()[e]+"px":n})}),b.each({Height:"height",Width:"width"},function(t,e){b.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){b.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return R(this,function(e,n,o){var r;return g(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===o?b.css(e,n,a):b.style(e,n,o,a)},e,s?o:void 0,s)}})}),b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){b.fn[e]=function(t){return this.on(e,t)}}),b.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){b.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}});var Fe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;b.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),p(t))return i=o.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(o.call(arguments)))}).guid=t.guid=t.guid||b.guid++,r},b.holdReady=function(t){t?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=A,b.isFunction=p,b.isWindow=g,b.camelCase=U,b.type=_,b.now=Date.now,b.isNumeric=function(t){var e=b.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},b.trim=function(t){return null==t?"":(t+"").replace(Fe,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return b});var Ue=t.jQuery,Ye=t.$;return b.noConflict=function(e){return t.$===b&&(t.$=Ye),e&&t.jQuery===b&&(t.jQuery=Ue),b},void 0===e&&(t.jQuery=t.$=b),b}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("@popperjs/core")):"function"==typeof define&&define.amd?define(["@popperjs/core"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).bootstrap=e(t.Popper)}(this,function(t){"use strict";function e(t){if(t&&t.__esModule)return t;const e=Object.create(null);if(t)for(const n in t)if("default"!==n){const i=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,i.get?i:{enumerable:!0,get:()=>t[n]})}return e.default=t,Object.freeze(e)}const n=e(t),i=t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t},o=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},r=t=>{const e=o(t);return e&&document.querySelector(e)?e:null},s=t=>{const e=o(t);return e?document.querySelector(e):null},a=t=>{t.dispatchEvent(new Event("transitionend"))},l=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),c=t=>l(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,u=(t,e,n)=>{Object.keys(n).forEach(i=>{const o=n[i],r=e[i],s=r&&l(r)?"element":(t=>null==t?`${t}`:{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase())(r);if(!new RegExp(o).test(s))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${o}".`)})},h=t=>!(!l(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),d=t=>!t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled"))),f=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?f(t.parentNode):null},p=()=>{},g=t=>{t.offsetHeight},m=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},v=[],y=()=>"rtl"===document.documentElement.dir,_=t=>{(t=>{"loading"===document.readyState?(v.length||document.addEventListener("DOMContentLoaded",()=>{v.forEach(t=>t())}),v.push(t)):t()})(()=>{const e=m();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=(()=>(e.fn[n]=i,t.jQueryInterface))}})},b=t=>{"function"==typeof t&&t()},w=(t,e,n=!0)=>{if(!n)return void b(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),o=Number.parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let o=!1;const r=({target:n})=>{n===e&&(o=!0,e.removeEventListener("transitionend",r),b(t))};e.addEventListener("transitionend",r),setTimeout(()=>{o||a(e)},i)},x=(t,e,n,i)=>{let o=t.indexOf(e);if(-1===o)return t[!n&&i?t.length-1:0];const r=t.length;return o+=n?1:-1,i&&(o=(o+r)%r),t[Math.max(0,Math.min(o,r-1))]},E=/[^.]*(?=\..*)\.|.*/,T=/\..*/,C=/::\d+$/,A={};let S=1;const k={mouseenter:"mouseover",mouseleave:"mouseout"},L=/^(mouseenter|mouseleave)/i,N=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function D(t,e){return e&&`${e}::${S++}`||t.uidEvent||S++}function O(t){const e=D(t);return t.uidEvent=e,A[e]=A[e]||{},A[e]}function I(t,e,n=null){const i=Object.keys(t);for(let o=0,r=i.length;o<r;o++){const r=t[i[o]];if(r.originalHandler===e&&r.delegationSelector===n)return r}return null}function j(t,e,n){const i="string"==typeof e,o=i?n:e;let r=M(t);return N.has(r)||(r=t),[i,o,r]}function P(t,e,n,i,o){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),L.test(e)){const t=t=>(function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)});i?i=t(i):n=t(n)}const[r,s,a]=j(e,n,i),l=O(t),c=l[a]||(l[a]={}),u=I(c,s,r?n:null);if(u)return void(u.oneOff=u.oneOff&&o);const h=D(s,e.replace(E,"")),d=r?function(t,e,n){return function i(o){const r=t.querySelectorAll(e);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(let a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&q.off(t,o.type,e,n),n.apply(s,[o]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&q.off(t,i.type,e),e.apply(t,[i])}}(t,n);d.delegationSelector=r?n:null,d.originalHandler=s,d.oneOff=o,d.uidEvent=h,c[h]=d,t.addEventListener(a,d,r)}function H(t,e,n,i,o){const r=I(e[n],i,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent])}function M(t){return t=t.replace(T,""),k[t]||t}const q={on(t,e,n,i){P(t,e,n,i,!1)},one(t,e,n,i){P(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[o,r,s]=j(e,n,i),a=s!==e,l=O(t),c=e.startsWith(".");if(void 0!==r){if(!l||!l[s])return;return void H(t,l,s,r,o?n:null)}c&&Object.keys(l).forEach(n=>{!function(t,e,n,i){const o=e[n]||{};Object.keys(o).forEach(r=>{if(r.includes(i)){const i=o[r];H(t,e,n,i.originalHandler,i.delegationSelector)}})}(t,l,n,e.slice(1))});const u=l[s]||{};Object.keys(u).forEach(n=>{const i=n.replace(C,"");if(!a||e.includes(i)){const e=u[n];H(t,l,s,e.originalHandler,e.delegationSelector)}})},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=m(),o=M(e),r=e!==o,s=N.has(o);let a,l=!0,c=!0,u=!1,h=null;return r&&i&&(a=i.Event(e,n),i(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(h=document.createEvent("HTMLEvents")).initEvent(o,l,!0):h=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(t=>{Object.defineProperty(h,t,{get:()=>n[t]})}),u&&h.preventDefault(),c&&t.dispatchEvent(h),h.defaultPrevented&&void 0!==a&&a.preventDefault(),h}},z=new Map,$={set(t,e,n){z.has(t)||z.set(t,new Map);const i=z.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>z.has(t)&&z.get(t).get(e)||null,remove(t,e){if(!z.has(t))return;const n=z.get(t);n.delete(e),0===n.size&&z.delete(t)}},R="5.1.3";class W{constructor(t){(t=c(t))&&(this._element=t,$.set(this._element,this.constructor.DATA_KEY,this))}dispose(){$.remove(this._element,this.constructor.DATA_KEY),q.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(t=>{this[t]=null})}_queueCallback(t,e,n=!0){w(t,e,n)}static getInstance(t){return $.get(c(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return R}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const B=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;q.on(document,n,`[data-bs-dismiss="${i}"]`,function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),d(this))return;const o=s(this)||this.closest(`.${i}`);t.getOrCreateInstance(o)[e]()})},F="alert",U="close.bs.alert",Y="closed.bs.alert",X="fade",V="show";class Q extends W{static get NAME(){return F}close(){if(q.trigger(this._element,U).defaultPrevented)return;this._element.classList.remove(V);const t=this._element.classList.contains(X);this._queueCallback(()=>this._destroyElement(),this._element,t)}_destroyElement(){this._element.remove(),q.trigger(this._element,Y),this.dispose()}static jQueryInterface(t){return this.each(function(){const e=Q.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}})}}B(Q,"close"),_(Q);const K="button",G="active";class J extends W{static get NAME(){return K}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle(G))}static jQueryInterface(t){return this.each(function(){const e=J.getOrCreateInstance(this);"toggle"===t&&e[t]()})}}function Z(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function tt(t){return t.replace(/[A-Z]/g,t=>`-${t.toLowerCase()}`)}q.on(document,"click.bs.button.data-api",'[data-bs-toggle="button"]',t=>{t.preventDefault();const e=t.target.closest('[data-bs-toggle="button"]');J.getOrCreateInstance(e).toggle()}),_(J);const et={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${tt(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${tt(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter(t=>t.startsWith("bs")).forEach(n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=Z(t.dataset[n])}),e},getDataAttribute:(t,e)=>Z(t.getAttribute(`data-bs-${tt(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},nt={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter(t=>t.matches(e)),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(t=>`${t}:not([tabindex^="-"])`).join(", ");return this.find(e,t).filter(t=>!d(t)&&h(t))}},it="carousel",ot=500,rt=40,st={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},at={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},lt="next",ct="prev",ut="left",ht="right",dt={ArrowLeft:ht,ArrowRight:ut},ft="slide.bs.carousel",pt="slid.bs.carousel",gt="keydown.bs.carousel",mt="mouseenter.bs.carousel",vt="mouseleave.bs.carousel",yt="touchstart.bs.carousel",_t="touchmove.bs.carousel",bt="touchend.bs.carousel",wt="pointerdown.bs.carousel",xt="pointerup.bs.carousel",Et="dragstart.bs.carousel",Tt="carousel",Ct="active",At="slide",St="carousel-item-end",kt="carousel-item-start",Lt="carousel-item-next",Nt="carousel-item-prev",Dt="pointer-event",Ot=".active",It=".active.carousel-item",jt=".carousel-item",Pt=".carousel-item img",Ht=".carousel-item-next, .carousel-item-prev",Mt=".carousel-indicators",qt="[data-bs-target]",zt="touch",$t="pen";class Rt extends W{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=nt.findOne(Mt,this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return st}static get NAME(){return it}next(){this._slide(lt)}nextWhenVisible(){!document.hidden&&h(this._element)&&this.next()}prev(){this._slide(ct)}pause(t){t||(this._isPaused=!0),nt.findOne(Ht,this._element)&&(a(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=nt.findOne(It,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void q.one(this._element,pt,()=>this.to(t));if(e===t)return this.pause(),void this.cycle();const n=t>e?lt:ct;this._slide(n,this._items[t])}_getConfig(t){return t={...st,...et.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(it,t,at),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=rt)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?ht:ut)}_addEventListeners(){this._config.keyboard&&q.on(this._element,gt,t=>this._keydown(t)),"hover"===this._config.pause&&(q.on(this._element,mt,t=>this.pause(t)),q.on(this._element,vt,t=>this.cycle(t))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&(t.pointerType===$t||t.pointerType===zt),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},n=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},i=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout(t=>this.cycle(t),ot+this._config.interval))};nt.find(Pt,this._element).forEach(t=>{q.on(t,Et,t=>t.preventDefault())}),this._pointerEvent?(q.on(this._element,wt,t=>e(t)),q.on(this._element,xt,t=>i(t)),this._element.classList.add(Dt)):(q.on(this._element,yt,t=>e(t)),q.on(this._element,_t,t=>n(t)),q.on(this._element,bt,t=>i(t)))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=dt[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?nt.find(jt,t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===lt;return x(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(nt.findOne(It,this._element));return q.trigger(this._element,ft,{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=nt.findOne(Ot,this._indicatorsElement);e.classList.remove(Ct),e.removeAttribute("aria-current");const n=nt.find(qt,this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Ct),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||nt.findOne(It,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=nt.findOne(It,this._element),o=this._getItemIndex(i),r=e||this._getItemByOrder(n,i),s=this._getItemIndex(r),a=Boolean(this._interval),l=n===lt,c=l?kt:St,u=l?Lt:Nt,h=this._orderToDirection(n);if(r&&r.classList.contains(Ct))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(r,h).defaultPrevented)return;if(!i||!r)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const d=()=>{q.trigger(this._element,pt,{relatedTarget:r,direction:h,from:o,to:s})};if(this._element.classList.contains(At)){r.classList.add(u),g(r),i.classList.add(c),r.classList.add(c);const t=()=>{r.classList.remove(c,u),r.classList.add(Ct),i.classList.remove(Ct,u,c),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Ct),r.classList.add(Ct),this._isSliding=!1,d();a&&this.cycle()}_directionToOrder(t){return[ht,ut].includes(t)?y()?t===ut?ct:lt:t===ut?lt:ct:t}_orderToDirection(t){return[lt,ct].includes(t)?y()?t===ct?ut:ht:t===ct?ht:ut:t}static carouselInterface(t,e){const n=Rt.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const o="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each(function(){Rt.carouselInterface(this,t)})}static dataApiClickHandler(t){const e=s(this);if(!e||!e.classList.contains(Tt))return;const n={...et.getDataAttributes(e),...et.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Rt.carouselInterface(e,n),i&&Rt.getInstance(e).to(i),t.preventDefault()}}q.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Rt.dataApiClickHandler),q.on(window,"load.bs.carousel.data-api",()=>{const t=nt.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Rt.carouselInterface(t[e],Rt.getInstance(t[e]))}),_(Rt);const Wt="collapse",Bt="bs.collapse",Ft=`.${Bt}`,Ut={toggle:!0,parent:null},Yt={toggle:"boolean",parent:"(null|element)"},Xt=`show${Ft}`,Vt=`shown${Ft}`,Qt=`hide${Ft}`,Kt=`hidden${Ft}`,Gt=`click${Ft}.data-api`,Jt="show",Zt="collapse",te="collapsing",ee="collapsed",ne=`:scope .${Zt} .${Zt}`,ie="collapse-horizontal",oe="width",re="height",se=".collapse.show, .collapse.collapsing",ae='[data-bs-toggle="collapse"]';class le extends W{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=nt.find(ae);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=r(e),o=nt.find(i).filter(t=>t===this._element);null!==i&&o.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ut}static get NAME(){return Wt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=nt.find(ne,this._config.parent);e=nt.find(se,this._config.parent).filter(e=>!t.includes(e))}const n=nt.findOne(this._selector);if(e.length){const i=e.find(t=>n!==t);if((t=i?le.getInstance(i):null)&&t._isTransitioning)return}if(q.trigger(this._element,Xt).defaultPrevented)return;e.forEach(e=>{n!==e&&le.getOrCreateInstance(e,{toggle:!1}).hide(),t||$.set(e,Bt,null)});const i=this._getDimension();this._element.classList.remove(Zt),this._element.classList.add(te),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(te),this._element.classList.add(Zt,Jt),this._element.style[i]="",q.trigger(this._element,Vt)},this._element,!0),this._element.style[i]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(q.trigger(this._element,Qt).defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,g(this._element),this._element.classList.add(te),this._element.classList.remove(Zt,Jt);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=s(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback(()=>{this._isTransitioning=!1,this._element.classList.remove(te),this._element.classList.add(Zt),q.trigger(this._element,Kt)},this._element,!0)}_isShown(t=this._element){return t.classList.contains(Jt)}_getConfig(t){return(t={...Ut,...et.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=c(t.parent),u(Wt,t,Yt),t}_getDimension(){return this._element.classList.contains(ie)?oe:re}_initializeChildren(){if(!this._config.parent)return;const t=nt.find(ne,this._config.parent);nt.find(ae,this._config.parent).filter(e=>!t.includes(e)).forEach(t=>{const e=s(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))})}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach(t=>{e?t.classList.remove(ee):t.classList.add(ee),t.setAttribute("aria-expanded",e)})}static jQueryInterface(t){return this.each(function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=le.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}})}}q.on(document,Gt,ae,function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=r(this);nt.find(e).forEach(t=>{le.getOrCreateInstance(t,{toggle:!1}).toggle()})}),_(le);const ce="dropdown",ue="Escape",he="Space",de="Tab",fe="ArrowUp",pe="ArrowDown",ge=2,me=new RegExp(`${fe}|${pe}|${ue}`),ve="hide.bs.dropdown",ye="hidden.bs.dropdown",_e="show.bs.dropdown",be="shown.bs.dropdown",we="show",xe="dropup",Ee="dropend",Te="dropstart",Ce="navbar",Ae='[data-bs-toggle="dropdown"]',Se=".dropdown-menu",ke=".navbar-nav",Le=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ne=y()?"top-end":"top-start",De=y()?"top-start":"top-end",Oe=y()?"bottom-end":"bottom-start",Ie=y()?"bottom-start":"bottom-end",je=y()?"left-start":"right-start",Pe=y()?"right-start":"left-start",He={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Me={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class qe extends W{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return He}static get DefaultType(){return Me}static get NAME(){return ce}toggle(){return this._isShown()?this.hide():this.show()}show(){if(d(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(q.trigger(this._element,_e,t).defaultPrevented)return;const e=qe.getParentFromElement(this._element);this._inNavbar?et.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(ke)&&[].concat(...document.body.children).forEach(t=>q.on(t,"mouseover",p)),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(we),this._element.classList.add(we),q.trigger(this._element,be,t)}hide(){if(d(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){q.trigger(this._element,ve,t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(t=>q.off(t,"mouseover",p)),this._popper&&this._popper.destroy(),this._menu.classList.remove(we),this._element.classList.remove(we),this._element.setAttribute("aria-expanded","false"),et.removeDataAttribute(this._menu,"popper"),q.trigger(this._element,ye,t))}_getConfig(t){if(t={...this.constructor.Default,...et.getDataAttributes(this._element),...t},u(ce,t,this.constructor.DefaultType),"object"==typeof t.reference&&!l(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${ce.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(t){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:l(this._config.reference)?e=c(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const i=this._getPopperConfig(),o=i.modifiers.find(t=>"applyStyles"===t.name&&!1===t.enabled);this._popper=n.createPopper(e,this._menu,i),o&&et.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(we)}_getMenuElement(){return nt.next(this._element,Se)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains(Ee))return je;if(t.classList.contains(Te))return Pe;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains(xe)?e?De:Ne:e?Ie:Oe}_detectNavbar(){return null!==this._element.closest(`.${Ce}`)}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map(t=>Number.parseInt(t,10)):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=nt.find(Le,this._menu).filter(h);n.length&&x(n,e,t===pe,!n.includes(e)).focus()}static jQueryInterface(t){return this.each(function(){const e=qe.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}static clearMenus(t){if(t&&(t.button===ge||"keyup"===t.type&&t.key!==de))return;const e=nt.find(Ae);for(let n=0,i=e.length;n<i;n++){const i=qe.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const o={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&t.key===de||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(o.clickEvent=t)}i._completeHide(o)}}static getParentFromElement(t){return s(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===he||t.key!==ue&&(t.key!==pe&&t.key!==fe||t.target.closest(Se)):!me.test(t.key))return;const e=this.classList.contains(we);if(!e&&t.key===ue)return;if(t.preventDefault(),t.stopPropagation(),d(this))return;const n=this.matches(Ae)?this:nt.prev(this,Ae)[0],i=qe.getOrCreateInstance(n);if(t.key!==ue)return t.key===fe||t.key===pe?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==he||qe.clearMenus());i.hide()}}q.on(document,"keydown.bs.dropdown.data-api",Ae,qe.dataApiKeydownHandler),q.on(document,"keydown.bs.dropdown.data-api",Se,qe.dataApiKeydownHandler),q.on(document,"click.bs.dropdown.data-api",qe.clearMenus),q.on(document,"keyup.bs.dropdown.data-api",qe.clearMenus),q.on(document,"click.bs.dropdown.data-api",Ae,function(t){t.preventDefault(),qe.getOrCreateInstance(this).toggle()}),_(qe);const ze=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",$e=".sticky-top";class Re{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",e=>e+t),this._setElementAttributes(ze,"paddingRight",e=>e+t),this._setElementAttributes($e,"marginRight",e=>e-t)}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const o=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(o))}px`})}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(ze,"paddingRight"),this._resetElementAttributes($e,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&et.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,t=>{const n=et.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(et.removeDataAttribute(t,e),t.style[e]=n)})}_applyManipulationCallback(t,e){l(t)?e(t):nt.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const We={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},Be={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},Fe="backdrop",Ue="fade",Ye="show",Xe=`mousedown.bs.${Fe}`;class Ve{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&g(this._getElement()),this._getElement().classList.add(Ye),this._emulateAnimation(()=>{b(t)})):b(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(Ye),this._emulateAnimation(()=>{this.dispose(),b(t)})):b(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add(Ue),this._element=t}return this._element}_getConfig(t){return(t={...We,..."object"==typeof t?t:{}}).rootElement=c(t.rootElement),u(Fe,t,Be),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),q.on(this._getElement(),Xe,()=>{b(this._config.clickCallback)}),this._isAppended=!0)}dispose(){this._isAppended&&(q.off(this._element,Xe),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){w(t,this._getElement(),this._config.isAnimated)}}const Qe={trapElement:null,autofocus:!0},Ke={trapElement:"element",autofocus:"boolean"},Ge="focustrap",Je=".bs.focustrap",Ze=`focusin${Je}`,tn=`keydown.tab${Je}`,en="Tab",nn="forward",on="backward";class rn{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),q.off(document,Je),q.on(document,Ze,t=>this._handleFocusin(t)),q.on(document,tn,t=>this._handleKeydown(t)),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,q.off(document,Je))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=nt.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===on?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){t.key===en&&(this._lastTabNavDirection=t.shiftKey?on:nn)}_getConfig(t){return t={...Qe,..."object"==typeof t?t:{}},u(Ge,t,Ke),t}}const sn="modal",an=".bs.modal",ln="Escape",cn={backdrop:!0,keyboard:!0,focus:!0},un={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},hn=`hide${an}`,dn=`hidePrevented${an}`,fn=`hidden${an}`,pn=`show${an}`,gn=`shown${an}`,mn=`resize${an}`,vn=`click.dismiss${an}`,yn=`keydown.dismiss${an}`,_n=`mouseup.dismiss${an}`,bn=`mousedown.dismiss${an}`,wn=`click${an}.data-api`,xn="modal-open",En="fade",Tn="show",Cn="modal-static",An=".modal-dialog",Sn=".modal-body";class kn extends W{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=nt.findOne(An,this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new Re}static get Default(){return cn}static get NAME(){return sn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;q.trigger(this._element,pn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(xn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),q.on(this._dialog,bn,()=>{q.one(this._element,_n,t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)})}),this._showBackdrop(()=>this._showElement(t)))}hide(){if(!this._isShown||this._isTransitioning)return;if(q.trigger(this._element,hn).defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Tn),q.off(this._element,vn),q.off(this._dialog,bn),this._queueCallback(()=>this._hideModal(),this._element,t)}dispose(){[window,this._dialog].forEach(t=>q.off(t,an)),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Ve({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new rn({trapElement:this._element})}_getConfig(t){return t={...cn,...et.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(sn,t,un),t}_showElement(t){const e=this._isAnimated(),n=nt.findOne(Sn,this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&g(this._element),this._element.classList.add(Tn);this._queueCallback(()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,q.trigger(this._element,gn,{relatedTarget:t})},this._dialog,e)}_setEscapeEvent(){this._isShown?q.on(this._element,yn,t=>{this._config.keyboard&&t.key===ln?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==ln||this._triggerBackdropTransition()}):q.off(this._element,yn)}_setResizeEvent(){this._isShown?q.on(window,mn,()=>this._adjustDialog()):q.off(window,mn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(()=>{document.body.classList.remove(xn),this._resetAdjustments(),this._scrollBar.reset(),q.trigger(this._element,fn)})}_showBackdrop(t){q.on(this._element,vn,t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())}),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains(En)}_triggerBackdropTransition(){if(q.trigger(this._element,dn).defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(Cn)||(i||(n.overflowY="hidden"),t.add(Cn),this._queueCallback(()=>{t.remove(Cn),i||this._queueCallback(()=>{n.overflowY=""},this._dialog)},this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!y()||n&&!t&&y())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!y()||!n&&t&&y())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each(function(){const n=kn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}})}}q.on(document,wn,'[data-bs-toggle="modal"]',function(t){const e=s(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),q.one(e,pn,t=>{t.defaultPrevented||q.one(e,fn,()=>{h(this)&&this.focus()})});const n=nt.findOne(".modal.show");n&&kn.getInstance(n).hide(),kn.getOrCreateInstance(e).toggle(this)}),B(kn),_(kn);const Ln="offcanvas",Nn="Escape",Dn={backdrop:!0,keyboard:!0,scroll:!1},On={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},In="show",jn="offcanvas-backdrop",Pn="show.bs.offcanvas",Hn="shown.bs.offcanvas",Mn="hide.bs.offcanvas",qn="hidden.bs.offcanvas",zn="keydown.dismiss.bs.offcanvas";class $n extends W{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Ln}static get Default(){return Dn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown)return;if(q.trigger(this._element,Pn,{relatedTarget:t}).defaultPrevented)return;this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new Re).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(In);this._queueCallback(()=>{this._config.scroll||this._focustrap.activate(),q.trigger(this._element,Hn,{relatedTarget:t})},this._element,!0)}hide(){if(!this._isShown)return;if(q.trigger(this._element,Mn).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(In),this._backdrop.hide();this._queueCallback(()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new Re).reset(),q.trigger(this._element,qn)},this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...Dn,...et.getDataAttributes(this._element),..."object"==typeof t?t:{}},u(Ln,t,On),t}_initializeBackDrop(){return new Ve({className:jn,isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new rn({trapElement:this._element})}_addEventListeners(){q.on(this._element,zn,t=>{this._config.keyboard&&t.key===Nn&&this.hide()})}static jQueryInterface(t){return this.each(function(){const e=$n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}})}}q.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',function(t){const e=s(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),d(this))return;q.one(e,qn,()=>{h(this)&&this.focus()});const n=nt.findOne(".offcanvas.show");n&&n!==e&&$n.getInstance(n).hide(),$n.getOrCreateInstance(e).toggle(this)}),q.on(window,"load.bs.offcanvas.data-api",()=>nt.find(".offcanvas.show").forEach(t=>$n.getOrCreateInstance(t).show())),B($n),_($n);const Rn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Wn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Bn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Fn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Rn.has(n)||Boolean(Wn.test(t.nodeValue)||Bn.test(t.nodeValue));const i=e.filter(t=>t instanceof RegExp);for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1},Un={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function Yn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){n.remove();continue}const r=[].concat(...n.attributes),s=[].concat(e["*"]||[],e[i]||[]);r.forEach(t=>{Fn(t,s)||n.removeAttribute(t.nodeName)})}return i.body.innerHTML}const Xn="tooltip",Vn="bs-tooltip",Qn=new Set(["sanitize","allowList","sanitizeFn"]),Kn={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Gn={AUTO:"auto",TOP:"top",RIGHT:y()?"left":"right",BOTTOM:"bottom",LEFT:y()?"right":"left"},Jn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:Un,popperConfig:null},Zn={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},ti="fade",ei="show",ni="show",ii="out",oi=".tooltip-inner",ri=".modal",si="hide.bs.modal",ai="hover",li="focus",ci="click",ui="manual";class hi extends W{constructor(t,e){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return Jn}static get NAME(){return Xn}static get Event(){return Zn}static get DefaultType(){return Kn}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(ei))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),q.off(this._element.closest(ri),si,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=q.trigger(this._element,this.constructor.Event.SHOW),e=f(this._element),o=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!o)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(oi).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const r=this.getTipElement(),s=i(this.constructor.NAME);r.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this._config.animation&&r.classList.add(ti);const a="function"==typeof this._config.placement?this._config.placement.call(this,r,this._element):this._config.placement,l=this._getAttachment(a);this._addAttachmentClass(l);const{container:c}=this._config;$.set(r,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(c.append(r),q.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=n.createPopper(this._element,r,this._getPopperConfig(l)),r.classList.add(ei);const u=this._resolvePossibleFunction(this._config.customClass);u&&r.classList.add(...u.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(t=>{q.on(t,"mouseover",p)});const h=this.tip.classList.contains(ti);this._queueCallback(()=>{const t=this._hoverState;this._hoverState=null,q.trigger(this._element,this.constructor.Event.SHOWN),t===ii&&this._leave(null,this)},this.tip,h)}hide(){if(!this._popper)return;const t=this.getTipElement();if(q.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(ei),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach(t=>q.off(t,"mouseover",p)),this._activeTrigger[ci]=!1,this._activeTrigger[li]=!1,this._activeTrigger[ai]=!1;const e=this.tip.classList.contains(ti);this._queueCallback(()=>{this._isWithActiveTrigger()||(this._hoverState!==ni&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),q.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())},this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(ti,ei),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),oi)}_sanitizeAndSetContent(t,e,n){const i=nt.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return l(e)?(e=c(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Yn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map(t=>Number.parseInt(t,10)):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return Gn[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach(t=>{if("click"===t)q.on(this._element,this.constructor.Event.CLICK,this._config.selector,t=>this.toggle(t));else if(t!==ui){const e=t===ai?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===ai?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;q.on(this._element,e,this._config.selector,t=>this._enter(t)),q.on(this._element,n,this._config.selector,t=>this._leave(t))}}),this._hideModalHandler=(()=>{this._element&&this.hide()}),q.on(this._element.closest(ri),si,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?li:ai]=!0),e.getTipElement().classList.contains(ei)||e._hoverState===ni?e._hoverState=ni:(clearTimeout(e._timeout),e._hoverState=ni,e._config.delay&&e._config.delay.show?e._timeout=setTimeout(()=>{e._hoverState===ni&&e.show()},e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?li:ai]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ii,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout(()=>{e._hoverState===ii&&e.hide()},e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=et.getDataAttributes(this._element);return Object.keys(e).forEach(t=>{Qn.has(t)&&delete e[t]}),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:c(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),u(Xn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Yn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map(t=>t.trim()).forEach(e=>t.classList.remove(e))}_getBasicClassPrefix(){return Vn}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each(function(){const e=hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}_(hi);const di="popover",fi="bs-popover",pi={...hi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...hi.DefaultType,content:"(string|element|function)"},mi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},vi=".popover-header",yi=".popover-body";class _i extends hi{static get Default(){return pi}static get NAME(){return di}static get Event(){return mi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),vi),this._sanitizeAndSetContent(t,this._getContent(),yi)}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return fi}static jQueryInterface(t){return this.each(function(){const e=_i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}_(_i);const bi="scrollspy",wi=".bs.scrollspy",xi={offset:10,method:"auto",target:""},Ei={offset:"number",method:"string",target:"(string|element)"},Ti=`activate${wi}`,Ci=`scroll${wi}`,Ai=`load${wi}.data-api`,Si="dropdown-item",ki="active",Li=".nav, .list-group",Ni=".nav-link",Di=".nav-item",Oi=".list-group-item",Ii=`${Ni}, ${Oi}, .${Si}`,ji=".dropdown",Pi=".dropdown-toggle",Hi="offset",Mi="position";class qi extends W{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,q.on(this._scrollElement,Ci,()=>this._process()),this.refresh(),this._process()}static get Default(){return xi}static get NAME(){return bi}refresh(){const t=this._scrollElement===this._scrollElement.window?Hi:Mi,e="auto"===this._config.method?t:this._config.method,n=e===Mi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),nt.find(Ii,this._config.target).map(t=>{const i=r(t),o=i?nt.findOne(i):null;if(o){const t=o.getBoundingClientRect();if(t.width||t.height)return[et[e](o).top+n,i]}return null}).filter(t=>t).sort((t,e)=>t[0]-e[0]).forEach(t=>{this._offsets.push(t[0]),this._targets.push(t[1])})}dispose(){q.off(this._scrollElement,wi),super.dispose()}_getConfig(t){return(t={...xi,...et.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=c(t.target)||document.documentElement,u(bi,t,Ei),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;){this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}}_activate(t){this._activeTarget=t,this._clear();const e=Ii.split(",").map(e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`),n=nt.findOne(e.join(","),this._config.target);n.classList.add(ki),n.classList.contains(Si)?nt.findOne(Pi,n.closest(ji)).classList.add(ki):nt.parents(n,Li).forEach(t=>{nt.prev(t,`${Ni}, ${Oi}`).forEach(t=>t.classList.add(ki)),nt.prev(t,Di).forEach(t=>{nt.children(t,Ni).forEach(t=>t.classList.add(ki))})}),q.trigger(this._scrollElement,Ti,{relatedTarget:t})}_clear(){nt.find(Ii,this._config.target).filter(t=>t.classList.contains(ki)).forEach(t=>t.classList.remove(ki))}static jQueryInterface(t){return this.each(function(){const e=qi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}q.on(window,Ai,()=>{nt.find('[data-bs-spy="scroll"]').forEach(t=>new qi(t))}),_(qi);const zi="tab",$i="hide.bs.tab",Ri="hidden.bs.tab",Wi="show.bs.tab",Bi="shown.bs.tab",Fi="dropdown-menu",Ui="active",Yi="fade",Xi="show",Vi=".dropdown",Qi=".nav, .list-group",Ki=".active",Gi=":scope > li > .active",Ji=".dropdown-toggle",Zi=":scope > .dropdown-menu .active";class to extends W{static get NAME(){return zi}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ui))return;let t;const e=s(this._element),n=this._element.closest(Qi);if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Gi:Ki;t=(t=nt.find(e,n))[t.length-1]}const i=t?q.trigger(t,$i,{relatedTarget:this._element}):null;if(q.trigger(this._element,Wi,{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const o=()=>{q.trigger(t,Ri,{relatedTarget:this._element}),q.trigger(this._element,Bi,{relatedTarget:t})};e?this._activate(e,e.parentNode,o):o()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?nt.children(e,Ki):nt.find(Gi,e))[0],o=n&&i&&i.classList.contains(Yi),r=()=>this._transitionComplete(t,i,n);i&&o?(i.classList.remove(Xi),this._queueCallback(r,t,!0)):r()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ui);const t=nt.findOne(Zi,e.parentNode);t&&t.classList.remove(Ui),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ui),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),g(t),t.classList.contains(Yi)&&t.classList.add(Xi);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains(Fi)){const e=t.closest(Vi);e&&nt.find(Ji,e).forEach(t=>t.classList.add(Ui)),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each(function(){const e=to.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}})}}q.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',function(t){if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),d(this))return;to.getOrCreateInstance(this).show()}),_(to);const eo="toast",no="mouseover.bs.toast",io="mouseout.bs.toast",oo="focusin.bs.toast",ro="focusout.bs.toast",so="hide.bs.toast",ao="hidden.bs.toast",lo="show.bs.toast",co="shown.bs.toast",uo="fade",ho="hide",fo="show",po="showing",go={animation:"boolean",autohide:"boolean",delay:"number"},mo={animation:!0,autohide:!0,delay:5e3};class vo extends W{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return go}static get Default(){return mo}static get NAME(){return eo}show(){if(q.trigger(this._element,lo).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add(uo);this._element.classList.remove(ho),g(this._element),this._element.classList.add(fo),this._element.classList.add(po),this._queueCallback(()=>{this._element.classList.remove(po),q.trigger(this._element,co),this._maybeScheduleHide()},this._element,this._config.animation)}hide(){if(!this._element.classList.contains(fo))return;if(q.trigger(this._element,so).defaultPrevented)return;this._element.classList.add(po),this._queueCallback(()=>{this._element.classList.add(ho),this._element.classList.remove(po),this._element.classList.remove(fo),q.trigger(this._element,ao)},this._element,this._config.animation)}dispose(){this._clearTimeout(),this._element.classList.contains(fo)&&this._element.classList.remove(fo),super.dispose()}_getConfig(t){return t={...mo,...et.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},u(eo,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(()=>{this.hide()},this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){q.on(this._element,no,t=>this._onInteraction(t,!0)),q.on(this._element,io,t=>this._onInteraction(t,!1)),q.on(this._element,oo,t=>this._onInteraction(t,!0)),q.on(this._element,ro,t=>this._onInteraction(t,!1))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each(function(){const e=vo.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}})}}return B(vo),_(vo),{Alert:Q,Button:J,Carousel:Rt,Collapse:le,Dropdown:qe,Modal:kn,Offcanvas:$n,Popover:_i,ScrollSpy:qi,Tab:to,Toast:vo,Tooltip:hi}}),function(t,e){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(n){return e(t,n)}):"object"==typeof module&&module.exports?module.exports=e(t,require("jquery")):t.jQueryBridget=e(t,t.jQuery)}(window,function(t,e){"use strict";function n(n,r,a){(a=a||e||t.jQuery)&&(r.prototype.option||(r.prototype.option=function(t){a.isPlainObject(t)&&(this.options=a.extend(!0,this.options,t))}),a.fn[n]=function(t){return"string"==typeof t?function(t,e,i){var o,r="$()."+n+'("'+e+'")';return t.each(function(t,l){var c=a.data(l,n);if(c){var u=c[e];if(u&&"_"!=e.charAt(0)){var h=u.apply(c,i);o=void 0===o?h:o}else s(r+" is not a valid method")}else s(n+" not initialized. Cannot call methods, i.e. "+r)}),void 0!==o?o:t}(this,t,o.call(arguments,1)):(function(t,e){t.each(function(t,i){var o=a.data(i,n);o?(o.option(e),o._init()):(o=new r(i,e),a.data(i,n,o))})}(this,t),this)},i(a))}function i(t){!t||t&&t.bridget||(t.bridget=n)}var o=Array.prototype.slice,r=t.console,s=void 0===r?function(){}:function(t){r.error(t)};return i(e||t.jQuery),n}),function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}("undefined"!=typeof window?window:this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){n=n.slice(0),e=e||[];for(var i=this._onceEvents&&this._onceEvents[t],o=0;o<n.length;o++){var r=n[o];i&&i[r]&&(this.off(t,r),delete i[r]),r.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t}),function(t,e){"function"==typeof define&&define.amd?define("get-size/get-size",e):"object"==typeof module&&module.exports?module.exports=e():t.getSize=e()}(window,function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}function e(t){var e=getComputedStyle(t);return e||r("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),e}function n(){if(!l){l=!0;var n=document.createElement("div");n.style.width="200px",n.style.padding="1px 2px 3px 4px",n.style.borderStyle="solid",n.style.borderWidth="1px 2px 3px 4px",n.style.boxSizing="border-box";var r=document.body||document.documentElement;r.appendChild(n);var s=e(n);o=200==Math.round(t(s.width)),i.isBoxSizeOuter=o,r.removeChild(n)}}function i(i){if(n(),"string"==typeof i&&(i=document.querySelector(i)),i&&"object"==typeof i&&i.nodeType){var r=e(i);if("none"==r.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;a>e;e++)t[s[e]]=0;return t}();var l={};l.width=i.offsetWidth,l.height=i.offsetHeight;for(var c=l.isBorderBox="border-box"==r.boxSizing,u=0;a>u;u++){var h=s[u],d=r[h],f=parseFloat(d);l[h]=isNaN(f)?0:f}var p=l.paddingLeft+l.paddingRight,g=l.paddingTop+l.paddingBottom,m=l.marginLeft+l.marginRight,v=l.marginTop+l.marginBottom,y=l.borderLeftWidth+l.borderRightWidth,_=l.borderTopWidth+l.borderBottomWidth,b=c&&o,w=t(r.width);!1!==w&&(l.width=w+(b?0:p+y));var x=t(r.height);return!1!==x&&(l.height=x+(b?0:g+_)),l.innerWidth=l.width-(p+y),l.innerHeight=l.height-(g+_),l.outerWidth=l.width+m,l.outerHeight=l.height+v,l}}var o,r="undefined"==typeof console?function(){}:function(t){console.error(t)},s=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],a=s.length,l=!1;return i}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",e):"object"==typeof module&&module.exports?module.exports=e():t.matchesSelector=e()}(window,function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0;n<e.length;n++){var i=e[n]+"MatchesSelector";if(t[i])return i}}();return function(e,n){return e[t](n)}}),function(t,e){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(n){return e(t,n)}):"object"==typeof module&&module.exports?module.exports=e(t,require("desandro-matches-selector")):t.fizzyUIUtils=e(t,t.matchesSelector)}(window,function(t,e){var n={extend:function(t,e){for(var n in e)t[n]=e[n];return t},modulo:function(t,e){return(t%e+e)%e}},i=Array.prototype.slice;n.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?i.call(t):[t]},n.removeFrom=function(t,e){var n=t.indexOf(e);-1!=n&&t.splice(n,1)},n.getParent=function(t,n){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,n))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,i){t=n.makeArray(t);var o=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!i)return void o.push(t);e(t,i)&&o.push(t);for(var n=t.querySelectorAll(i),r=0;r<n.length;r++)o.push(n[r])}}),o},n.debounceMethod=function(t,e,n){n=n||100;var i=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout(function(){i.apply(r,e),delete r[o]},n)}},n.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var o=t.console;return n.htmlInit=function(e,i){n.docReady(function(){var r=n.toDashed(i),s="data-"+r,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+r),c=n.makeArray(a).concat(n.makeArray(l)),u=s+"-options",h=t.jQuery;c.forEach(function(t){var n,r=t.getAttribute(s)||t.getAttribute(u);try{n=r&&JSON.parse(r)}catch(e){return void(o&&o.error("Error parsing "+s+" on "+t.className+": "+e))}var a=new e(t,n);h&&h.data(t,i,a)})})},n}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("ev-emitter"),require("get-size")):(t.Outlayer={},t.Outlayer.Item=e(t.EvEmitter,t.getSize))}(window,function(t,e){"use strict";function n(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var i=document.documentElement.style,o="string"==typeof i.transition?"transition":"WebkitTransition",r="string"==typeof i.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[o],a={transform:r,transition:o,transitionDuration:o+"Duration",transitionProperty:o+"Property",transitionDelay:o+"Delay"},l=n.prototype=Object.create(t.prototype);l.constructor=n,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.getSize=function(){this.size=e(this.element)},l.css=function(t){var e=this.element.style;for(var n in t){e[a[n]||n]=t[n]}},l.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),i=t[e?"left":"right"],o=t[n?"top":"bottom"],r=parseFloat(i),s=parseFloat(o),a=this.layout.size;-1!=i.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=e?a.paddingLeft:a.paddingRight,s-=n?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var t=this.layout.size,e={},n=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),o=n?"paddingLeft":"paddingRight",r=n?"left":"right",s=n?"right":"left",a=this.position.x+t[o];e[r]=this.getXValue(a),e[s]="";var l=i?"paddingTop":"paddingBottom",c=i?"top":"bottom",u=i?"bottom":"top",h=this.position.y+t[l];e[c]=this.getYValue(h),e[u]="",this.css(e),this.emitEvent("layout",[this])},l.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},l.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},l._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var r=t-n,s=e-i,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},l.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},l._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},l.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);if(t.from){this.css(t.from);this.element.offsetHeight;null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var c="opacity,"+function(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}(r);l.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:c,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},l.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},l.onotransitionend=function(t){this.ontransitionend(t)};var u={"-webkit-transform":"transform"};l.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=u[t.propertyName]||t.propertyName;if(delete e.ingProperties[n],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd)e.onEnd[n].call(this),delete e.onEnd[n];this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},l._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var h={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(h)},l.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){return o&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),void this.hide()):void this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},l.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},n}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(n,i,o,r){return e(t,n,i,o,r)}):"object"==typeof module&&module.exports?module.exports=e(t,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):t.Outlayer=e(t,t.EvEmitter,t.getSize,t.fizzyUIUtils,t.Outlayer.Item)}(window,function(t,e,n,i,o){"use strict";function r(t,e){var n=i.getQueryElement(t);if(n){this.element=n,l&&(this.$element=l(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(e);var o=++u;this.element.outlayerGUID=o,h[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t))}function s(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}var a=t.console,l=t.jQuery,c=function(){},u=0,h={};r.namespace="outlayer",r.Item=o,r.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var d=r.prototype;i.extend(d,e.prototype),d.option=function(t){i.extend(this.options,t)},d._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},r.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},d._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),i.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},d.reloadItems=function(){this.items=this._itemize(this.element.children)},d._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],o=0;o<e.length;o++){var r=new n(e[o],this);i.push(r)}return i},d._filterFindItemElements=function(t){return i.filterFindElements(t,this.options.itemSelector)},d.getItemElements=function(){return this.items.map(function(t){return t.element})},d.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},d._init=d.layout,d._resetLayout=function(){this.getSize()},d.getSize=function(){this.size=n(this.element)},d._getMeasurement=function(t,e){var i,o=this.options[t];o?("string"==typeof o?i=this.element.querySelector(o):o instanceof HTMLElement&&(i=o),this[t]=i?n(i)[e]:o):this[t]=0},d.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},d._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},d._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach(function(t){var i=this._getItemLayoutPosition(t);i.item=t,i.isInstant=e||t.isLayoutInstant,n.push(i)},this),this._processLayoutQueue(n)}},d._getItemLayoutPosition=function(){return{x:0,y:0}},d._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},d.updateStagger=function(){var t=this.options.stagger;return null==t?void(this.stagger=0):(this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),n=e&&e[1],i=e&&e[2];return n.length?(n=parseFloat(n))*(f[i]||1):0}(t),this.stagger)},d._positionItem=function(t,e,n,i,o){i?t.goTo(e,n):(t.stagger(o*this.stagger),t.moveTo(e,n))},d._postLayout=function(){this.resizeContainer()},d.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},d._getContainerSize=c,d._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},d._emitCompleteOnItems=function(t,e){function n(){o.dispatchEvent(t+"Complete",null,[e])}function i(){++s==r&&n()}var o=this,r=e.length;if(e&&r){var s=0;e.forEach(function(e){e.once(t,i)})}else n()},d.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),l)if(this.$element=this.$element||l(this.element),e){var o=l.Event(e);o.type=t,this.$element.trigger(o,n)}else this.$element.trigger(t,n)},d.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},d.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},d.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},d.unstamp=function(t){(t=this._find(t))&&t.forEach(function(t){i.removeFrom(this.stamps,t),this.unignore(t)},this)},d._find=function(t){return t?("string"==typeof t&&(t=this.element.querySelectorAll(t)),t=i.makeArray(t)):void 0},d._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},d._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},d._manageStamp=c,d._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,o=n(t);return{left:e.left-i.left-o.marginLeft,top:e.top-i.top-o.marginTop,right:i.right-e.right-o.marginRight,bottom:i.bottom-e.bottom-o.marginBottom}},d.handleEvent=i.handleEvent,d.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},d.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},d.onresize=function(){this.resize()},i.debounceMethod(r,"onresize",100),d.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},d.needsResizeLayout=function(){var t=n(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},d.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},d.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},d.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},d.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,n){t.stagger(n*e),t.reveal()})}},d.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,n){t.stagger(n*e),t.hide()})}},d.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},d.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},d.getItem=function(t){for(var e=0;e<this.items.length;e++){var n=this.items[e];if(n.element==t)return n}},d.getItems=function(t){t=i.makeArray(t);var e=[];return t.forEach(function(t){var n=this.getItem(t);n&&e.push(n)},this),e},d.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),i.removeFrom(this.items,t)},this)},d.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete h[e],delete this.element.outlayerGUID,l&&l.removeData(this.element,this.constructor.namespace)},r.data=function(t){var e=(t=i.getQueryElement(t))&&t.outlayerGUID;return e&&h[e]},r.create=function(t,e){var n=s(r);return n.defaults=i.extend({},r.defaults),i.extend(n.defaults,e),n.compatOptions=i.extend({},r.compatOptions),n.namespace=t,n.data=r.data,n.Item=s(o),i.htmlInit(n,t),l&&l.bridget&&l.bridget(t,n),n};var f={ms:1,s:1e3};return r.Item=o,r}),function(t,e){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer"),require("get-size")):t.Masonry=e(t.Outlayer,t.getSize)}(window,function(t,e){var n=t.create("masonry");n.compatOptions.fitWidth="isFitWidth";var i=n.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/i,s=i-o%i;r=Math[s&&1>s?"round":"floor"](r),this.cols=Math.max(r,1)},i.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,n=Math[e&&1>e?"round":"ceil"](t.size.outerWidth/this.columnWidth);n=Math.min(n,this.cols);for(var i=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](n,t),o={x:this.columnWidth*i.col,y:i.y},r=i.y+t.size.outerHeight,s=n+i.col,a=i.col;s>a;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(t){var e=this._getTopColGroup(t),n=Math.min.apply(Math,e);return{col:e.indexOf(n),y:n}},i._getTopColGroup=function(t){if(2>t)return this.colYs;for(var e=[],n=this.cols+1-t,i=0;n>i;i++)e[i]=this._getColGroupY(i,t);return e},i._getColGroupY=function(t,e){if(2>e)return this.colYs[t];var n=this.colYs.slice(t,t+e);return Math.max.apply(Math,n)},i._getHorizontalColPosition=function(t,e){var n=this.horizontalColIndex%this.cols;n=t>1&&n+t>this.cols?0:n;var i=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=i?n+t:this.horizontalColIndex,{col:n,y:this._getColGroupY(n,t)}},i._manageStamp=function(t){var n=e(t),i=this._getElementOffset(t),o=this._getOption("originLeft")?i.left:i.right,r=o+n.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var l=(this._getOption("originTop")?i.top:i.bottom)+n.outerHeight,c=s;a>=c;c++)this.colYs[c]=Math.max(l,this.colYs[c])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},i._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},n}),$(document).ready(function(){const t=window.location.hash,e=$("html, body"),n=$("header"),i=n.outerHeight();function o(t,n=null){if(!t)return;const o=$(t).offset().top-i;$("header nav .nav-item.active").removeClass("active"),e.stop().animate({scrollTop:o},500,"swing",()=>{$(`a.nav-link[href="${t}"]`).parent().addClass("active"),n&&n()})}o(t),$(".comments").masonry({itemSelector:".item",columnWidth:".item",percentPosition:!0,gutter:12}),$("header nav .nav-item .nav-link").click(function(){o($(this).attr("href"))}),$("a.navbar-brand").click(function(){o($(this).attr("href"),()=>{window.location.hash=""})}),$(window).scroll(function(){$(window).scrollTop();n.addClass("shadow")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
